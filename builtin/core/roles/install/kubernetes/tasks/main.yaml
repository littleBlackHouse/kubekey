---
- name: high-availablility.yaml

- name: Check kubernetes if installed
  ignore_errors: true
  command: kubectl get node --field-selector metadata.name={{ .hostname }}
  register: kube_node_info_important

- name: Check if kubernetes has init
  when:
    - .groups.kube_control_plane | default list | has .inventory_name
    - and (.kube_node_info_important.stderr | ne "") (.kube_node_info_important.stdout | ne "No resources found")
  set_fact:
    init_kubernetes_node: |
      {{ .inventory_name }}

- include_tasks: install_binaries.yaml

- name: Init kubernetes
  when: eq .inventory_name .init_kubernetes_node
  block:
    - include_tasks: init_kubernetes.yaml
      when: and (.kube_node_info_important.stderr | ne "") (.kube_node_info_important.stdout | ne "No resources found")
    - include_tasks: deploy_cluster_dns.yaml
    - name: Fetch kubeconfig to local
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: |
          {{ .work_dir }}/kubekey/kubeconfig
    - name: Generate certificate key by kubeadm
      command: |
        /usr/local/bin/kubeadm init phase upload-certs --upload-certs --config /etc/kubernetes/kubeadm-config.yaml 2>&1 \
          | awk '/Using certificate key:/{getline; print}'
      register: kubeadm_cert_result
    - name: Set_Fact certificate key to all hosts
      set_fact:
        kubeadm_cert: |
          {{ .kubeadm_cert_result.stdout }}
    - name: Generate kubeadm token
      block:
        - name: Generate token by kubeadm
          command: /usr/local/bin/kubeadm token create
          register: kubeadm_token_result
        - name: Set_Fact token to all hosts
          set_fact:
            kubeadm_token: |
              {{ .kubeadm_token_result.stdout }}

- name: Join kubernetes
  when: ne .hostname .init_kubernetes_node
  tasks:
    # HAProxy is deployed as a static Pod, which starts only after Kubelet is running.
    # Therefore, the control plane must be reachable before HAProxy starts (e.g., by configuring /etc/hosts).
    - name: Write tmp dns to /etc/hosts
      command: |
        cat >> /etc/hosts << EOF
        # haproxy dns for kubekey begin
        {{- $internalIPv4 := index .inventory_hosts (.groups.kube_control_plane | default list | first) "internal_ipv4" | default "" }}
        {{- $internalIPv6 := index .inventory_hosts (.groups.kube_control_plane | default list | first) "internal_ipv6" | default "" }}
        {{- if ne $internalIPv4 "" }}
        {{ $internalIPv4 }} {{ .kubernetes.control_plane_endpoint.host }}
        {{- else if ne $internalIPv6 "" }}
        {{ $internalIPv6 }} {{ .kubernetes.control_plane_endpoint.host }}
        {{- end }}
        # haproxy dns for kubekey end
        EOF
      when: .kubernetes.control_plane_endpoint.type | eq "haproxy"
    - include_tasks: join_kubernetes.yaml
      when: and (.kube_node_info_important.stderr | ne "") (.kube_node_info_important.stdout | ne "No resources found")
    - name: Replace haproxy dns to /etc/hosts
      when: .kubernetes.control_plane_endpoint.type | eq "haproxy"
      - name: Replace control_plane by local hosts
        when: .groups.kube_control_plane | default list | has .inventory_name
        command: |
          new_dns="# haproxy dns for kubekey begin
          {{- if ne .internal_ipv4 "" }}
          {{ .internal_ipv4 }} {{ .kubernetes.control_plane_endpoint.host }}
          {{- else if ne .internal_ipv6 "" }}
          {{ .internal_ipv6  }} {{ .kubernetes.control_plane_endpoint.host }}
          {{- end }}
          # haproxy dns for kubekey end"
          sed -i '/# haproxy dns for kubekey begin/,/# haproxy dns for kubekey end/c\'"$new_dns" /etc/hosts
      - name: Replace worker by haproxy hosts
        when: .groups.worker | default list | has .inventory_name
        command: |
          new_dns="# haproxy dns for kubekey begin
          {{ .kubernetes.control_plane_endpoint.haproxy.address }} {{ .kubernetes.control_plane_endpoint.host }}
          # haproxy dns for kubekey end"
          sed -i '/# haproxy dns for kubekey begin/,/# haproxy dns for kubekey end/c\'"$new_dns" /etc/hosts

- name: Add custom label to cluster
  command: |
    {{- range $k, $v := .kubernetes.custom_label }}
    /usr/local/bin/kubectl label --overwrite node {{ $.hostname }} {{ $k }}={{ $v }}
    {{- end }}
  when: .kubernetes.custom_label | len | lt 0
