---
- name: Should found network interface
  command:  |
    {{- if .kubernetes.control_plane_endpoint.kube_vip.address | ipFamily | eq "IPv4" }}
    if [ ! -n "$(ip -o addr show | grep {{ .internal_ipv4 }} | awk '{print $2}')" ]; then
      echo "No ipv4 network interface found"
      exit 1
    fi
    {{- end }}
    {{- if .kubernetes.control_plane_endpoint.host | ipFamily | eq "IPv6" }}
    if [ ! -n "$(ip -o addr show | grep {{ .internal_ipv6 }} | awk '{print $2}')" ]; then
      echo "No ipv6 network interface found"
      exit 1
    fi
    {{- end }}

# https://kubernetes.io/docs/concepts/services-networking/dual-stack/
- name: Stop if pod cidr is not valid
  assert:
    that: 
      - .kubernetes.networking.pod_cidr | splitList "," | len | ge 2
      - .kubernetes.networking.service_cidr | splitList "," | len | ge 2
    fail_msg: |
      kubernetes.networking.pod_cidr and kubernetes.networking.service_cidr only support ipv4_cidr/ipv6_cidr or ipv4_cidr,ipv6_cidr


- name: Stop if pod networking is not support dual-stack 
  assert:
    that: 
      - .kube_version | semverCompare ">=v1.20.0"
      - .kubernetes.networking.pod_cidr | splitList "," | first | ipFamily | eq "IPv4"
      - .kubernetes.networking.pod_cidr | splitList "," | last | ipFamily | eq "IPv6"
    fail_msg: |
      Kubernetes introduced support for pod dual-stack networking starting from version v1.20.0.
  when: .kubernetes.networking.pod_cidr | splitList "," | len | eq 2

- name: Stop if service networking is not support dual-stack 
  assert:
    that: 
      - .kube_version | semverCompare ">=v1.20.0"
      - .kubernetes.networking.service_cidr | splitList "," | first | ipFamily | eq "IPv4"
      - .kubernetes.networking.service_cidr | splitList "," | last | ipFamily | eq "IPv6"
    fail_msg: |
      Kubernetes introduced support for service dual-stack networking starting from version v1.20.0.
  when: .kubernetes.networking.service_cidr | splitList "," | len | eq 2

- name: Stop if unknown network plugin
  assert:
    that: .cluster_require.require_network_plugin | has .cni.type
    fail_msg: |
      kube_network_plugin:"{{ .cni.type }}" is not supported

# This assertion will fail on the safe side: One can indeed schedule more pods
# on a node than the CIDR-range has space for when additional pods use the host
# network namespace. It is impossible to ascertain the number of such pods at
# provisioning time, so to establish a guarantee, we factor these out.
# NOTICE: the check blatantly ignores the inet6-case
- name: Guarantee that enough network address space is available for all pods
  when: .groups.k8s_cluster | default list | has .inventory_name
  - name: Guarantee that enough ipv4 network address space is available for all pods
    when: .kubernetes.networking.pod_cidr | splitList "," | first | ipFamily | eq "IPv4"
    assert:
      that: le .kubernetes.kubelet.max_pods  (sub (pow 2 (sub 32 .kubernetes.networking.ipv4_mask_size)) 2)
      fail_msg: do not schedule more pods on a node than ipv4 inet addresses are available.
  - name: Guarantee that enough ipv6 network address space is available for all pods
    when: .kubernetes.networking.pod_cidr | splitList "," | last | ipFamily | eq "IPv6"
    assert:
      that: le .kubernetes.kubelet.max_pods  (sub (pow 2 (sub 128 .kubernetes.networking.ipv6_mask_size)) 2)
      fail_msg: do not schedule more pods on a node than ipv6 inet addresses are available.
